name: Build and Test Workflow
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  INGESTOR_IMAGE_NAME: ${{ github.repository }}
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: Lint files
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-go@v6
        with:
          go-version: '1.21'
      - name: generate
        run: go generate ./internal/webserver
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6.1.0
        with:
          version: v1.60.3
      - name: Run markdownlint
        uses: DavidAnson/markdownlint-cli2-action@v15
        with:
          # Lint all markdown files in the repo
          globs: '**/*.md'


  run_tests:
    runs-on: ${{matrix.build.os}}
    strategy:
      fail-fast: false
      matrix:
        build:
        - goos: linux
          goarch: amd64
          os: ubuntu-22.04
        - goos: windows
          goarch: amd64
          os: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.21'

    - name: Set up gotestfmt
      uses: gotesttools/gotestfmt-action@v2
      with:
        # Optional: pass GITHUB_TOKEN to avoid rate limiting.
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate REST API and Docs
      run: go generate ./internal/webserver

    - name: Test Internal Package
      run: |
        go generate ./internal/webserver
        go test -json -v  ./internal/... 2>&1 | tee gotestinternal-${{ matrix.build.goos }}-${{ matrix.build.goarch }}.log | gotestfmt

    - name: Upload Test Log
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: internal-test-log-${{ matrix.build.goos }}-${{ matrix.build.goarch }}
        path: gotestinternal-${{ matrix.build.goos }}-${{ matrix.build.goarch }}.log
        if-no-files-found: error

    - name: Test Service
      run: |
        go test -json -v  ./cmd/openem-ingestor-service/ 2>&1 | tee gotestservice-${{ matrix.build.goos }}-${{ matrix.build.goarch }}.log | gotestfmt

    - name: Upload Test Log
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: service-test-log-${{ matrix.build.goos }}-${{ matrix.build.goarch }}
        path: gotestservice-${{ matrix.build.goos }}-${{ matrix.build.goarch }}.log
        if-no-files-found: error


  build_docker_image:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Log into registry ${{ env.REGISTRY }}
        # if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.INGESTOR_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            VERSION=${{ steps.meta.outputs.tags }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build_service:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: 'App'
            goos: linux
            goarch: amd64
            os: ubuntu-22.04
          - name: 'App'
            goos: windows
            goarch: amd64
            os: windows-latest
          - name: 'App'
            goos: darwin
            goarch: amd64
            os: macos-latest
          - name: 'App'
            goos: darwin
            goarch: arm64
            os: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.21'

    - name: Generate REST API and Docs
      run: go generate ./internal/webserver

    - name: Build Service
      run: GOOS=${{ matrix.build.goos }} GOARCH=${{ matrix.build.goarch }} go build -C ./cmd/openem-ingestor-service/ -v

  build_app:
    strategy:
    # Failure in one platform build won't impact the others
      fail-fast: false
      matrix:
        build:
          - name: 'App'
            platform:  'linux/amd64'
            os: 'ubuntu-latest'
          # Windows build takes too long
          # - name: 'App'
          #   platform:  'windows/amd64'
          #   os: 'windows-latest'
          # Macos build currently fails
          # - name: 'App'
          #   platform:  'darwin/universal'
          #   os: 'macos-latest'

    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.23'

      - name: Generate REST API and Docs
        run: go generate ./internal/webserver

      - name: Build wails
        uses: dAppServer/wails-build-action@main
        id: build
        with:
          build-name: ${{ matrix.build.name }}
          build-platform: ${{ matrix.build.platform }}
          package: false
          go-version: '1.23'
          app-working-directory: cmd/openem-ingestor-app
