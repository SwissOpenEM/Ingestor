// Package webserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package webserver

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for TransferItemStatus.
const (
	Cancelled     TransferItemStatus = "cancelled"
	Failed        TransferItemStatus = "failed"
	Finished      TransferItemStatus = "finished"
	InvalidStatus TransferItemStatus = "invalid status"
	Transferring  TransferItemStatus = "transferring"
	Waiting       TransferItemStatus = "waiting"
)

// DeleteTransferRequest defines model for DeleteTransferRequest.
type DeleteTransferRequest struct {
	// DeleteTask if the entry needs to be deleted or not, in addition to cancelling it (by default false)
	DeleteTask *bool `json:"deleteTask,omitempty"`

	// ScicatToken if the ingestor is configured to use ExtGlobusService for transfer, this endpoint needs a SciCat token
	ScicatToken *string `json:"scicatToken,omitempty"`

	// TransferId id of the transfer that should be cancelled
	TransferId string `json:"transferId"`
}

// DeleteTransferResponse defines model for DeleteTransferResponse.
type DeleteTransferResponse struct {
	// Status New status of the transfer.
	Status *string `json:"status,omitempty"`

	// TransferId Transfer id affected
	TransferId string `json:"transferId"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// FolderNode a method item describes the method's name and schema
type FolderNode struct {
	Children        bool   `json:"children"`
	Name            string `json:"name"`
	Path            string `json:"path"`
	ProbablyDataset bool   `json:"probablyDataset"`
}

// GetBrowseDatasetResponse defines model for GetBrowseDatasetResponse.
type GetBrowseDatasetResponse struct {
	Folders []FolderNode `json:"folders"`

	// Total Total number of folders.
	Total uint `json:"total"`
}

// GetExtractorResponse defines model for GetExtractorResponse.
type GetExtractorResponse struct {
	// Methods List of the metadata extraction method names configured in the ingestor
	Methods []MethodItem `json:"methods"`

	// Total Total number of methods
	Total int `json:"total"`
}

// GetTransferResponse defines model for GetTransferResponse.
type GetTransferResponse struct {
	// Total Total number of transfers.
	Total     *int            `json:"total,omitempty"`
	Transfers *[]TransferItem `json:"transfers,omitempty"`
}

// MethodItem a method item describes the method's name and schema
type MethodItem struct {
	Name   string `json:"name"`
	Schema string `json:"schema"`
}

// OtherHealthResponse defines model for OtherHealthResponse.
type OtherHealthResponse struct {
	Errors *map[string]string `json:"errors,omitempty"`

	// Status Status of the ingestor.
	Status string `json:"status"`
}

// OtherVersionResponse defines model for OtherVersionResponse.
type OtherVersionResponse struct {
	// Version Version of the ingestor.
	Version *string `json:"version,omitempty"`
}

// PostDatasetRequest defines model for PostDatasetRequest.
type PostDatasetRequest struct {
	// AutoArchive whether to autoarchive the dataset. Default is TRUE
	AutoArchive *bool `json:"autoArchive,omitempty"`

	// MetaData The metadata of the dataset.
	MetaData string `json:"metaData"`

	// UserToken the scicat token for acting on behalf of the user
	UserToken string `json:"userToken"`
}

// PostDatasetResponse defines model for PostDatasetResponse.
type PostDatasetResponse struct {
	// DatasetId The created dataset's id
	DatasetId string `json:"datasetId"`

	// Status The status of the transfer. Can be used to send a message back to the ui.
	Status *string `json:"status,omitempty"`

	// TransferId The unique transfer id of the dataset transfer job.
	TransferId *string `json:"transferId,omitempty"`
}

// TransferItem defines model for TransferItem.
type TransferItem struct {
	BytesTotal       *int64             `json:"bytesTotal,omitempty"`
	BytesTransferred *int64             `json:"bytesTransferred,omitempty"`
	FilesTotal       *int32             `json:"filesTotal,omitempty"`
	FilesTransferred *int32             `json:"filesTransferred,omitempty"`
	Message          *string            `json:"message,omitempty"`
	Status           TransferItemStatus `json:"status"`
	TransferId       string             `json:"transferId"`
}

// TransferItemStatus defines model for TransferItem.Status.
type TransferItemStatus string

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Email             *string    `json:"email,omitempty"`
	ExpiresAt         *time.Time `json:"expires_at,omitempty"`
	FamilyName        *string    `json:"family_name,omitempty"`
	GivenName         *string    `json:"given_name,omitempty"`
	LoggedIn          bool       `json:"logged_in"`
	Name              *string    `json:"name,omitempty"`
	PreferredUsername *string    `json:"preferred_username,omitempty"`
	Profile           *string    `json:"profile,omitempty"`
	Roles             *[]string  `json:"roles,omitempty"`
	Subject           *string    `json:"subject,omitempty"`
}

// GetCallbackParams defines parameters for GetCallback.
type GetCallbackParams struct {
	// Code For handling the authorization code received from the OIDC provider
	Code string `form:"code" json:"code"`

	// State parameter for CSRF protection
	State string `form:"state" json:"state"`
}

// DatasetControllerBrowseFilesystemParams defines parameters for DatasetControllerBrowseFilesystem.
type DatasetControllerBrowseFilesystemParams struct {
	Path     string `form:"path" json:"path"`
	Page     *uint  `form:"page,omitempty" json:"page,omitempty"`
	PageSize *uint  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// ExtractorControllerGetExtractorMethodsParams defines parameters for ExtractorControllerGetExtractorMethods.
type ExtractorControllerGetExtractorMethodsParams struct {
	Page     *uint `form:"page,omitempty" json:"page,omitempty"`
	PageSize *uint `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetGlobusCallbackParams defines parameters for GetGlobusCallback.
type GetGlobusCallbackParams struct {
	// Code For handling the authorization code received from Globus
	Code string `form:"code" json:"code"`

	// State parameter for CSRF protection
	State string `form:"state" json:"state"`
}

// ExtractMetadataParams defines parameters for ExtractMetadata.
type ExtractMetadataParams struct {
	FilePath   string `form:"filePath" json:"filePath"`
	MethodName string `form:"methodName" json:"methodName"`
}

// TransferControllerGetTransferParams defines parameters for TransferControllerGetTransfer.
type TransferControllerGetTransferParams struct {
	TransferId     *string `form:"transferId,omitempty" json:"transferId,omitempty"`
	Page           *uint   `form:"page,omitempty" json:"page,omitempty"`
	PageSize       *uint   `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	ScicatAPIToken *string `json:"Scicat-API-Token,omitempty"`
}

// DatasetControllerIngestDatasetJSONRequestBody defines body for DatasetControllerIngestDataset for application/json ContentType.
type DatasetControllerIngestDatasetJSONRequestBody = PostDatasetRequest

// TransferControllerDeleteTransferJSONRequestBody defines body for TransferControllerDeleteTransfer for application/json ContentType.
type TransferControllerDeleteTransferJSONRequestBody = DeleteTransferRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OIDC callback
	// (GET /callback)
	GetCallback(c *gin.Context, params GetCallbackParams)
	// Ingest a new dataset
	// (POST /dataset)
	DatasetControllerIngestDataset(c *gin.Context)
	// Get a list of folders to a specific path.
	// (GET /dataset/browse)
	DatasetControllerBrowseFilesystem(c *gin.Context, params DatasetControllerBrowseFilesystemParams)
	// Get available extraction methods
	// (GET /extractor)
	ExtractorControllerGetExtractorMethods(c *gin.Context, params ExtractorControllerGetExtractorMethodsParams)
	// callback for globus
	// (GET /globus-callback)
	GetGlobusCallback(c *gin.Context, params GetGlobusCallbackParams)
	// Get the health status.
	// (GET /health)
	OtherControllerGetHealth(c *gin.Context)
	// OIDC login
	// (GET /login)
	GetLogin(c *gin.Context)
	// end user session
	// (GET /logout)
	GetLogout(c *gin.Context)
	// get metadata of a dataset
	// (GET /metadata)
	ExtractMetadata(c *gin.Context, params ExtractMetadataParams)
	// Cancel a data transfer
	// (DELETE /transfer)
	TransferControllerDeleteTransfer(c *gin.Context)
	// Get list of transfers. Optional use the transferId parameter to only get one item.
	// (GET /transfer)
	TransferControllerGetTransfer(c *gin.Context, params TransferControllerGetTransferParams)
	// returns user info to caller
	// (GET /userinfo)
	GetUserinfo(c *gin.Context)
	// Get the used ingestor version
	// (GET /version)
	OtherControllerGetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCallback operation middleware
func (siw *ServerInterfaceWrapper) GetCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCallback(c, params)
}

// DatasetControllerIngestDataset operation middleware
func (siw *ServerInterfaceWrapper) DatasetControllerIngestDataset(c *gin.Context) {

	c.Set(CookieAuthScopes, []string{"ingestor_write"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DatasetControllerIngestDataset(c)
}

// DatasetControllerBrowseFilesystem operation middleware
func (siw *ServerInterfaceWrapper) DatasetControllerBrowseFilesystem(c *gin.Context) {

	var err error

	c.Set(CookieAuthScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DatasetControllerBrowseFilesystemParams

	// ------------- Required query parameter "path" -------------

	if paramValue := c.Query("path"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument path is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", c.Request.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DatasetControllerBrowseFilesystem(c, params)
}

// ExtractorControllerGetExtractorMethods operation middleware
func (siw *ServerInterfaceWrapper) ExtractorControllerGetExtractorMethods(c *gin.Context) {

	var err error

	c.Set(CookieAuthScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExtractorControllerGetExtractorMethodsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtractorControllerGetExtractorMethods(c, params)
}

// GetGlobusCallback operation middleware
func (siw *ServerInterfaceWrapper) GetGlobusCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGlobusCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGlobusCallback(c, params)
}

// OtherControllerGetHealth operation middleware
func (siw *ServerInterfaceWrapper) OtherControllerGetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OtherControllerGetHealth(c)
}

// GetLogin operation middleware
func (siw *ServerInterfaceWrapper) GetLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogin(c)
}

// GetLogout operation middleware
func (siw *ServerInterfaceWrapper) GetLogout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogout(c)
}

// ExtractMetadata operation middleware
func (siw *ServerInterfaceWrapper) ExtractMetadata(c *gin.Context) {

	var err error

	c.Set(CookieAuthScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExtractMetadataParams

	// ------------- Required query parameter "filePath" -------------

	if paramValue := c.Query("filePath"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument filePath is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "filePath", c.Request.URL.Query(), &params.FilePath)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filePath: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "methodName" -------------

	if paramValue := c.Query("methodName"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument methodName is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "methodName", c.Request.URL.Query(), &params.MethodName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter methodName: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtractMetadata(c, params)
}

// TransferControllerDeleteTransfer operation middleware
func (siw *ServerInterfaceWrapper) TransferControllerDeleteTransfer(c *gin.Context) {

	c.Set(CookieAuthScopes, []string{"ingestor_write"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferControllerDeleteTransfer(c)
}

// TransferControllerGetTransfer operation middleware
func (siw *ServerInterfaceWrapper) TransferControllerGetTransfer(c *gin.Context) {

	var err error

	c.Set(CookieAuthScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params TransferControllerGetTransferParams

	// ------------- Optional query parameter "transferId" -------------

	err = runtime.BindQueryParameter("form", true, false, "transferId", c.Request.URL.Query(), &params.TransferId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transferId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Scicat-API-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Scicat-API-Token")]; found {
		var ScicatAPIToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Scicat-API-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Scicat-API-Token", valueList[0], &ScicatAPIToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Scicat-API-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.ScicatAPIToken = &ScicatAPIToken

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferControllerGetTransfer(c, params)
}

// GetUserinfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserinfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserinfo(c)
}

// OtherControllerGetVersion operation middleware
func (siw *ServerInterfaceWrapper) OtherControllerGetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OtherControllerGetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/callback", wrapper.GetCallback)
	router.POST(options.BaseURL+"/dataset", wrapper.DatasetControllerIngestDataset)
	router.GET(options.BaseURL+"/dataset/browse", wrapper.DatasetControllerBrowseFilesystem)
	router.GET(options.BaseURL+"/extractor", wrapper.ExtractorControllerGetExtractorMethods)
	router.GET(options.BaseURL+"/globus-callback", wrapper.GetGlobusCallback)
	router.GET(options.BaseURL+"/health", wrapper.OtherControllerGetHealth)
	router.GET(options.BaseURL+"/login", wrapper.GetLogin)
	router.GET(options.BaseURL+"/logout", wrapper.GetLogout)
	router.GET(options.BaseURL+"/metadata", wrapper.ExtractMetadata)
	router.DELETE(options.BaseURL+"/transfer", wrapper.TransferControllerDeleteTransfer)
	router.GET(options.BaseURL+"/transfer", wrapper.TransferControllerGetTransfer)
	router.GET(options.BaseURL+"/userinfo", wrapper.GetUserinfo)
	router.GET(options.BaseURL+"/version", wrapper.OtherControllerGetVersion)
}

type GetCallbackRequestObject struct {
	Params GetCallbackParams
}

type GetCallbackResponseObject interface {
	VisitGetCallbackResponse(w http.ResponseWriter) error
}

type GetCallback302ResponseHeaders struct {
	Location string
}

type GetCallback302Response struct {
	Headers GetCallback302ResponseHeaders
}

func (response GetCallback302Response) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetCallback400TextResponse string

func (response GetCallback400TextResponse) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetCallback500TextResponse string

func (response GetCallback500TextResponse) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type DatasetControllerIngestDatasetRequestObject struct {
	Body *DatasetControllerIngestDatasetJSONRequestBody
}

type DatasetControllerIngestDatasetResponseObject interface {
	VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error
}

type DatasetControllerIngestDataset200JSONResponse PostDatasetResponse

func (response DatasetControllerIngestDataset200JSONResponse) VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DatasetControllerIngestDataset400TextResponse string

func (response DatasetControllerIngestDataset400TextResponse) VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type DatasetControllerBrowseFilesystemRequestObject struct {
	Params DatasetControllerBrowseFilesystemParams
}

type DatasetControllerBrowseFilesystemResponseObject interface {
	VisitDatasetControllerBrowseFilesystemResponse(w http.ResponseWriter) error
}

type DatasetControllerBrowseFilesystem200JSONResponse GetBrowseDatasetResponse

func (response DatasetControllerBrowseFilesystem200JSONResponse) VisitDatasetControllerBrowseFilesystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DatasetControllerBrowseFilesystem400TextResponse string

func (response DatasetControllerBrowseFilesystem400TextResponse) VisitDatasetControllerBrowseFilesystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type DatasetControllerBrowseFilesystem401TextResponse string

func (response DatasetControllerBrowseFilesystem401TextResponse) VisitDatasetControllerBrowseFilesystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(401)

	_, err := w.Write([]byte(response))
	return err
}

type DatasetControllerBrowseFilesystem500TextResponse string

func (response DatasetControllerBrowseFilesystem500TextResponse) VisitDatasetControllerBrowseFilesystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type ExtractorControllerGetExtractorMethodsRequestObject struct {
	Params ExtractorControllerGetExtractorMethodsParams
}

type ExtractorControllerGetExtractorMethodsResponseObject interface {
	VisitExtractorControllerGetExtractorMethodsResponse(w http.ResponseWriter) error
}

type ExtractorControllerGetExtractorMethods200JSONResponse GetExtractorResponse

func (response ExtractorControllerGetExtractorMethods200JSONResponse) VisitExtractorControllerGetExtractorMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGlobusCallbackRequestObject struct {
	Params GetGlobusCallbackParams
}

type GetGlobusCallbackResponseObject interface {
	VisitGetGlobusCallbackResponse(w http.ResponseWriter) error
}

type GetGlobusCallback302ResponseHeaders struct {
	Location string
}

type GetGlobusCallback302Response struct {
	Headers GetGlobusCallback302ResponseHeaders
}

func (response GetGlobusCallback302Response) VisitGetGlobusCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetGlobusCallback400TextResponse string

func (response GetGlobusCallback400TextResponse) VisitGetGlobusCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetGlobusCallback500TextResponse string

func (response GetGlobusCallback500TextResponse) VisitGetGlobusCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type OtherControllerGetHealthRequestObject struct {
}

type OtherControllerGetHealthResponseObject interface {
	VisitOtherControllerGetHealthResponse(w http.ResponseWriter) error
}

type OtherControllerGetHealth200JSONResponse OtherHealthResponse

func (response OtherControllerGetHealth200JSONResponse) VisitOtherControllerGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OtherControllerGetHealth400TextResponse string

func (response OtherControllerGetHealth400TextResponse) VisitOtherControllerGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetLoginRequestObject struct {
}

type GetLoginResponseObject interface {
	VisitGetLoginResponse(w http.ResponseWriter) error
}

type GetLogin302ResponseHeaders struct {
	Location string
}

type GetLogin302Response struct {
	Headers GetLogin302ResponseHeaders
}

func (response GetLogin302Response) VisitGetLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetLogoutRequestObject struct {
}

type GetLogoutResponseObject interface {
	VisitGetLogoutResponse(w http.ResponseWriter) error
}

type GetLogout302ResponseHeaders struct {
	Location string
}

type GetLogout302Response struct {
	Headers GetLogout302ResponseHeaders
}

func (response GetLogout302Response) VisitGetLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetLogout500TextResponse string

func (response GetLogout500TextResponse) VisitGetLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type ExtractMetadataRequestObject struct {
	Params ExtractMetadataParams
}

type ExtractMetadataResponseObject interface {
	VisitExtractMetadataResponse(w http.ResponseWriter) error
}

type ExtractMetadata200ResponseHeaders struct {
	CacheControl string
	Connection   string
	ContentType  string
}

type ExtractMetadata200TexteventStreamResponse struct {
	Body          io.Reader
	Headers       ExtractMetadata200ResponseHeaders
	ContentLength int64
}

func (response ExtractMetadata200TexteventStreamResponse) VisitExtractMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Connection", fmt.Sprint(response.Headers.Connection))
	w.Header().Set("Content-Type", fmt.Sprint(response.Headers.ContentType))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ExtractMetadatadefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExtractMetadatadefaultJSONResponse) VisitExtractMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TransferControllerDeleteTransferRequestObject struct {
	Body *TransferControllerDeleteTransferJSONRequestBody
}

type TransferControllerDeleteTransferResponseObject interface {
	VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error
}

type TransferControllerDeleteTransfer200JSONResponse DeleteTransferResponse

func (response TransferControllerDeleteTransfer200JSONResponse) VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferControllerDeleteTransfer400TextResponse string

func (response TransferControllerDeleteTransfer400TextResponse) VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type TransferControllerGetTransferRequestObject struct {
	Params TransferControllerGetTransferParams
}

type TransferControllerGetTransferResponseObject interface {
	VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error
}

type TransferControllerGetTransfer200JSONResponse GetTransferResponse

func (response TransferControllerGetTransfer200JSONResponse) VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferControllerGetTransfer400TextResponse string

func (response TransferControllerGetTransfer400TextResponse) VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetUserinfoRequestObject struct {
}

type GetUserinfoResponseObject interface {
	VisitGetUserinfoResponse(w http.ResponseWriter) error
}

type GetUserinfo200JSONResponse UserInfo

func (response GetUserinfo200JSONResponse) VisitGetUserinfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserinfo400TextResponse string

func (response GetUserinfo400TextResponse) VisitGetUserinfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetUserinfo500TextResponse string

func (response GetUserinfo500TextResponse) VisitGetUserinfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type OtherControllerGetVersionRequestObject struct {
}

type OtherControllerGetVersionResponseObject interface {
	VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error
}

type OtherControllerGetVersion200JSONResponse OtherVersionResponse

func (response OtherControllerGetVersion200JSONResponse) VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OtherControllerGetVersion400TextResponse string

func (response OtherControllerGetVersion400TextResponse) VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// OIDC callback
	// (GET /callback)
	GetCallback(ctx context.Context, request GetCallbackRequestObject) (GetCallbackResponseObject, error)
	// Ingest a new dataset
	// (POST /dataset)
	DatasetControllerIngestDataset(ctx context.Context, request DatasetControllerIngestDatasetRequestObject) (DatasetControllerIngestDatasetResponseObject, error)
	// Get a list of folders to a specific path.
	// (GET /dataset/browse)
	DatasetControllerBrowseFilesystem(ctx context.Context, request DatasetControllerBrowseFilesystemRequestObject) (DatasetControllerBrowseFilesystemResponseObject, error)
	// Get available extraction methods
	// (GET /extractor)
	ExtractorControllerGetExtractorMethods(ctx context.Context, request ExtractorControllerGetExtractorMethodsRequestObject) (ExtractorControllerGetExtractorMethodsResponseObject, error)
	// callback for globus
	// (GET /globus-callback)
	GetGlobusCallback(ctx context.Context, request GetGlobusCallbackRequestObject) (GetGlobusCallbackResponseObject, error)
	// Get the health status.
	// (GET /health)
	OtherControllerGetHealth(ctx context.Context, request OtherControllerGetHealthRequestObject) (OtherControllerGetHealthResponseObject, error)
	// OIDC login
	// (GET /login)
	GetLogin(ctx context.Context, request GetLoginRequestObject) (GetLoginResponseObject, error)
	// end user session
	// (GET /logout)
	GetLogout(ctx context.Context, request GetLogoutRequestObject) (GetLogoutResponseObject, error)
	// get metadata of a dataset
	// (GET /metadata)
	ExtractMetadata(ctx context.Context, request ExtractMetadataRequestObject) (ExtractMetadataResponseObject, error)
	// Cancel a data transfer
	// (DELETE /transfer)
	TransferControllerDeleteTransfer(ctx context.Context, request TransferControllerDeleteTransferRequestObject) (TransferControllerDeleteTransferResponseObject, error)
	// Get list of transfers. Optional use the transferId parameter to only get one item.
	// (GET /transfer)
	TransferControllerGetTransfer(ctx context.Context, request TransferControllerGetTransferRequestObject) (TransferControllerGetTransferResponseObject, error)
	// returns user info to caller
	// (GET /userinfo)
	GetUserinfo(ctx context.Context, request GetUserinfoRequestObject) (GetUserinfoResponseObject, error)
	// Get the used ingestor version
	// (GET /version)
	OtherControllerGetVersion(ctx context.Context, request OtherControllerGetVersionRequestObject) (OtherControllerGetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCallback operation middleware
func (sh *strictHandler) GetCallback(ctx *gin.Context, params GetCallbackParams) {
	var request GetCallbackRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallback(ctx, request.(GetCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallbackResponseObject); ok {
		if err := validResponse.VisitGetCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DatasetControllerIngestDataset operation middleware
func (sh *strictHandler) DatasetControllerIngestDataset(ctx *gin.Context) {
	var request DatasetControllerIngestDatasetRequestObject

	var body DatasetControllerIngestDatasetJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DatasetControllerIngestDataset(ctx, request.(DatasetControllerIngestDatasetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DatasetControllerIngestDataset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DatasetControllerIngestDatasetResponseObject); ok {
		if err := validResponse.VisitDatasetControllerIngestDatasetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DatasetControllerBrowseFilesystem operation middleware
func (sh *strictHandler) DatasetControllerBrowseFilesystem(ctx *gin.Context, params DatasetControllerBrowseFilesystemParams) {
	var request DatasetControllerBrowseFilesystemRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DatasetControllerBrowseFilesystem(ctx, request.(DatasetControllerBrowseFilesystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DatasetControllerBrowseFilesystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DatasetControllerBrowseFilesystemResponseObject); ok {
		if err := validResponse.VisitDatasetControllerBrowseFilesystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtractorControllerGetExtractorMethods operation middleware
func (sh *strictHandler) ExtractorControllerGetExtractorMethods(ctx *gin.Context, params ExtractorControllerGetExtractorMethodsParams) {
	var request ExtractorControllerGetExtractorMethodsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtractorControllerGetExtractorMethods(ctx, request.(ExtractorControllerGetExtractorMethodsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtractorControllerGetExtractorMethods")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtractorControllerGetExtractorMethodsResponseObject); ok {
		if err := validResponse.VisitExtractorControllerGetExtractorMethodsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGlobusCallback operation middleware
func (sh *strictHandler) GetGlobusCallback(ctx *gin.Context, params GetGlobusCallbackParams) {
	var request GetGlobusCallbackRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGlobusCallback(ctx, request.(GetGlobusCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGlobusCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGlobusCallbackResponseObject); ok {
		if err := validResponse.VisitGetGlobusCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OtherControllerGetHealth operation middleware
func (sh *strictHandler) OtherControllerGetHealth(ctx *gin.Context) {
	var request OtherControllerGetHealthRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OtherControllerGetHealth(ctx, request.(OtherControllerGetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OtherControllerGetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OtherControllerGetHealthResponseObject); ok {
		if err := validResponse.VisitOtherControllerGetHealthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogin operation middleware
func (sh *strictHandler) GetLogin(ctx *gin.Context) {
	var request GetLoginRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogin(ctx, request.(GetLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLoginResponseObject); ok {
		if err := validResponse.VisitGetLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogout operation middleware
func (sh *strictHandler) GetLogout(ctx *gin.Context) {
	var request GetLogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogout(ctx, request.(GetLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLogoutResponseObject); ok {
		if err := validResponse.VisitGetLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtractMetadata operation middleware
func (sh *strictHandler) ExtractMetadata(ctx *gin.Context, params ExtractMetadataParams) {
	var request ExtractMetadataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtractMetadata(ctx, request.(ExtractMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtractMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtractMetadataResponseObject); ok {
		if err := validResponse.VisitExtractMetadataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferControllerDeleteTransfer operation middleware
func (sh *strictHandler) TransferControllerDeleteTransfer(ctx *gin.Context) {
	var request TransferControllerDeleteTransferRequestObject

	var body TransferControllerDeleteTransferJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TransferControllerDeleteTransfer(ctx, request.(TransferControllerDeleteTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferControllerDeleteTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TransferControllerDeleteTransferResponseObject); ok {
		if err := validResponse.VisitTransferControllerDeleteTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferControllerGetTransfer operation middleware
func (sh *strictHandler) TransferControllerGetTransfer(ctx *gin.Context, params TransferControllerGetTransferParams) {
	var request TransferControllerGetTransferRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TransferControllerGetTransfer(ctx, request.(TransferControllerGetTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferControllerGetTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TransferControllerGetTransferResponseObject); ok {
		if err := validResponse.VisitTransferControllerGetTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserinfo operation middleware
func (sh *strictHandler) GetUserinfo(ctx *gin.Context) {
	var request GetUserinfoRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserinfo(ctx, request.(GetUserinfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserinfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserinfoResponseObject); ok {
		if err := validResponse.VisitGetUserinfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OtherControllerGetVersion operation middleware
func (sh *strictHandler) OtherControllerGetVersion(ctx *gin.Context) {
	var request OtherControllerGetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OtherControllerGetVersion(ctx, request.(OtherControllerGetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OtherControllerGetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OtherControllerGetVersionResponseObject); ok {
		if err := validResponse.VisitOtherControllerGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
