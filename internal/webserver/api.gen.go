// Package webserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package webserver

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// DeleteTransferRequest defines model for DeleteTransferRequest.
type DeleteTransferRequest struct {
	// IngestId Ingestion id to abort the ingestion
	IngestId *string `json:"ingestId,omitempty"`
}

// DeleteTransferResponse defines model for DeleteTransferResponse.
type DeleteTransferResponse struct {
	// IngestId Ingestion id to abort the ingestion
	IngestId *string `json:"ingestId,omitempty"`

	// Status New status of the ingestion.
	Status *string `json:"status,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetDatasetResponse defines model for GetDatasetResponse.
type GetDatasetResponse struct {
	Datasets []string `json:"datasets"`

	// Total Total number of datasets.
	Total int `json:"total"`
}

// GetExtractorResponse defines model for GetExtractorResponse.
type GetExtractorResponse struct {
	// Methods List of the metadata extraction method names configured in the ingestor
	Methods []MethodItem `json:"methods"`

	// Total Total number of methods
	Total int `json:"total"`
}

// GetMetadataRequest defines model for GetMetadataRequest.
type GetMetadataRequest struct {
	// FilePath The file path of the selected data record.
	FilePath string `json:"filePath"`

	// MethodName The selected methodName for data extraction.
	MethodName string `json:"methodName"`
}

// GetTransferResponse defines model for GetTransferResponse.
type GetTransferResponse struct {
	// Total Total number of transfers.
	Total     *int            `json:"total,omitempty"`
	Transfers *[]TransferItem `json:"transfers,omitempty"`
}

// MethodItem a method item describes the method's name and schema
type MethodItem struct {
	Name   string `json:"name"`
	Schema string `json:"schema"`
}

// OtherHealthResponse defines model for OtherHealthResponse.
type OtherHealthResponse struct {
	Errors *map[string]string `json:"errors,omitempty"`

	// Status Status of the ingestor.
	Status string `json:"status"`
}

// OtherVersionResponse defines model for OtherVersionResponse.
type OtherVersionResponse struct {
	// Version Version of the ingestor.
	Version *string `json:"version,omitempty"`
}

// PostDatasetRequest defines model for PostDatasetRequest.
type PostDatasetRequest struct {
	// MetaData The metadata of the dataset.
	MetaData string `json:"metaData"`

	// UserToken the scicat token for acting on behalf of the user
	UserToken string `json:"userToken"`
}

// PostDatasetResponse defines model for PostDatasetResponse.
type PostDatasetResponse struct {
	// IngestId The unique ingestion id of the dataset.
	IngestId *string `json:"ingestId,omitempty"`

	// Status The status of the ingestion. Can be used to send a message back to the ui.
	Status *string `json:"status,omitempty"`
}

// TransferItem defines model for TransferItem.
type TransferItem struct {
	Status     *string `json:"status,omitempty"`
	TransferId *string `json:"transferId,omitempty"`
}

// GetCallbackParams defines parameters for GetCallback.
type GetCallbackParams struct {
	// Code For handling the authorization code received from the OIDC provider
	Code string `form:"code" json:"code"`

	// State parameter for CSRF protection
	State string `form:"state" json:"state"`
}

// DatasetControllerGetDatasetParams defines parameters for DatasetControllerGetDataset.
type DatasetControllerGetDatasetParams struct {
	Page     *uint `form:"page,omitempty" json:"page,omitempty"`
	PageSize *uint `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// ExtractorControllerGetExtractorMethodsParams defines parameters for ExtractorControllerGetExtractorMethods.
type ExtractorControllerGetExtractorMethodsParams struct {
	Page     *uint `form:"page,omitempty" json:"page,omitempty"`
	PageSize *uint `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// TransferControllerGetTransferParams defines parameters for TransferControllerGetTransfer.
type TransferControllerGetTransferParams struct {
	TransferId *string `form:"transferId,omitempty" json:"transferId,omitempty"`
	Page       *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize   *int    `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DatasetControllerIngestDatasetJSONRequestBody defines body for DatasetControllerIngestDataset for application/json ContentType.
type DatasetControllerIngestDatasetJSONRequestBody = PostDatasetRequest

// ExtractMetadataJSONRequestBody defines body for ExtractMetadata for application/json ContentType.
type ExtractMetadataJSONRequestBody = GetMetadataRequest

// TransferControllerDeleteTransferJSONRequestBody defines body for TransferControllerDeleteTransfer for application/json ContentType.
type TransferControllerDeleteTransferJSONRequestBody = DeleteTransferRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OIDC callback
	// (GET /callback)
	GetCallback(c *gin.Context, params GetCallbackParams)
	// Get the available datasets.
	// (GET /dataset)
	DatasetControllerGetDataset(c *gin.Context, params DatasetControllerGetDatasetParams)
	// Ingest a new dataset
	// (POST /dataset)
	DatasetControllerIngestDataset(c *gin.Context)
	// Get available extraction methods
	// (GET /extractor)
	ExtractorControllerGetExtractorMethods(c *gin.Context, params ExtractorControllerGetExtractorMethodsParams)
	// Get the health status.
	// (GET /health)
	OtherControllerGetHealth(c *gin.Context)
	// OIDC login
	// (GET /login)
	GetLogin(c *gin.Context)
	// end user session
	// (GET /logout)
	GetLogout(c *gin.Context)
	// get metadata of a dataset
	// (GET /metadata)
	ExtractMetadata(c *gin.Context)
	// Cancel a data transfer
	// (DELETE /transfer)
	TransferControllerDeleteTransfer(c *gin.Context)
	// Get list of transfers. Optional use the transferId parameter to only get one item.
	// (GET /transfer)
	TransferControllerGetTransfer(c *gin.Context, params TransferControllerGetTransferParams)
	// Get the used ingestor version
	// (GET /version)
	OtherControllerGetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCallback operation middleware
func (siw *ServerInterfaceWrapper) GetCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCallback(c, params)
}

// DatasetControllerGetDataset operation middleware
func (siw *ServerInterfaceWrapper) DatasetControllerGetDataset(c *gin.Context) {

	var err error

	c.Set(CookieAuthScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DatasetControllerGetDatasetParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DatasetControllerGetDataset(c, params)
}

// DatasetControllerIngestDataset operation middleware
func (siw *ServerInterfaceWrapper) DatasetControllerIngestDataset(c *gin.Context) {

	c.Set(CookieAuthScopes, []string{"ingestor_write"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DatasetControllerIngestDataset(c)
}

// ExtractorControllerGetExtractorMethods operation middleware
func (siw *ServerInterfaceWrapper) ExtractorControllerGetExtractorMethods(c *gin.Context) {

	var err error

	c.Set(CookieAuthScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExtractorControllerGetExtractorMethodsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtractorControllerGetExtractorMethods(c, params)
}

// OtherControllerGetHealth operation middleware
func (siw *ServerInterfaceWrapper) OtherControllerGetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OtherControllerGetHealth(c)
}

// GetLogin operation middleware
func (siw *ServerInterfaceWrapper) GetLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogin(c)
}

// GetLogout operation middleware
func (siw *ServerInterfaceWrapper) GetLogout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogout(c)
}

// ExtractMetadata operation middleware
func (siw *ServerInterfaceWrapper) ExtractMetadata(c *gin.Context) {

	c.Set(CookieAuthScopes, []string{"ingestor_read", "ingestor_write", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtractMetadata(c)
}

// TransferControllerDeleteTransfer operation middleware
func (siw *ServerInterfaceWrapper) TransferControllerDeleteTransfer(c *gin.Context) {

	c.Set(CookieAuthScopes, []string{"ingestor_write"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferControllerDeleteTransfer(c)
}

// TransferControllerGetTransfer operation middleware
func (siw *ServerInterfaceWrapper) TransferControllerGetTransfer(c *gin.Context) {

	var err error

	c.Set(CookieAuthScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params TransferControllerGetTransferParams

	// ------------- Optional query parameter "transferId" -------------

	err = runtime.BindQueryParameter("form", true, false, "transferId", c.Request.URL.Query(), &params.TransferId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transferId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferControllerGetTransfer(c, params)
}

// OtherControllerGetVersion operation middleware
func (siw *ServerInterfaceWrapper) OtherControllerGetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OtherControllerGetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/callback", wrapper.GetCallback)
	router.GET(options.BaseURL+"/dataset", wrapper.DatasetControllerGetDataset)
	router.POST(options.BaseURL+"/dataset", wrapper.DatasetControllerIngestDataset)
	router.GET(options.BaseURL+"/extractor", wrapper.ExtractorControllerGetExtractorMethods)
	router.GET(options.BaseURL+"/health", wrapper.OtherControllerGetHealth)
	router.GET(options.BaseURL+"/login", wrapper.GetLogin)
	router.GET(options.BaseURL+"/logout", wrapper.GetLogout)
	router.GET(options.BaseURL+"/metadata", wrapper.ExtractMetadata)
	router.DELETE(options.BaseURL+"/transfer", wrapper.TransferControllerDeleteTransfer)
	router.GET(options.BaseURL+"/transfer", wrapper.TransferControllerGetTransfer)
	router.GET(options.BaseURL+"/version", wrapper.OtherControllerGetVersion)
}

type GetCallbackRequestObject struct {
	Params GetCallbackParams
}

type GetCallbackResponseObject interface {
	VisitGetCallbackResponse(w http.ResponseWriter) error
}

type GetCallback302ResponseHeaders struct {
	Location string
}

type GetCallback302Response struct {
	Headers GetCallback302ResponseHeaders
}

func (response GetCallback302Response) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetCallback400TextResponse string

func (response GetCallback400TextResponse) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetCallback500TextResponse string

func (response GetCallback500TextResponse) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type DatasetControllerGetDatasetRequestObject struct {
	Params DatasetControllerGetDatasetParams
}

type DatasetControllerGetDatasetResponseObject interface {
	VisitDatasetControllerGetDatasetResponse(w http.ResponseWriter) error
}

type DatasetControllerGetDataset200JSONResponse GetDatasetResponse

func (response DatasetControllerGetDataset200JSONResponse) VisitDatasetControllerGetDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DatasetControllerGetDataset400TextResponse string

func (response DatasetControllerGetDataset400TextResponse) VisitDatasetControllerGetDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type DatasetControllerIngestDatasetRequestObject struct {
	Body *DatasetControllerIngestDatasetJSONRequestBody
}

type DatasetControllerIngestDatasetResponseObject interface {
	VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error
}

type DatasetControllerIngestDataset200JSONResponse PostDatasetResponse

func (response DatasetControllerIngestDataset200JSONResponse) VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DatasetControllerIngestDataset400TextResponse string

func (response DatasetControllerIngestDataset400TextResponse) VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type ExtractorControllerGetExtractorMethodsRequestObject struct {
	Params ExtractorControllerGetExtractorMethodsParams
}

type ExtractorControllerGetExtractorMethodsResponseObject interface {
	VisitExtractorControllerGetExtractorMethodsResponse(w http.ResponseWriter) error
}

type ExtractorControllerGetExtractorMethods200JSONResponse GetExtractorResponse

func (response ExtractorControllerGetExtractorMethods200JSONResponse) VisitExtractorControllerGetExtractorMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OtherControllerGetHealthRequestObject struct {
}

type OtherControllerGetHealthResponseObject interface {
	VisitOtherControllerGetHealthResponse(w http.ResponseWriter) error
}

type OtherControllerGetHealth200JSONResponse OtherHealthResponse

func (response OtherControllerGetHealth200JSONResponse) VisitOtherControllerGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OtherControllerGetHealth400TextResponse string

func (response OtherControllerGetHealth400TextResponse) VisitOtherControllerGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetLoginRequestObject struct {
}

type GetLoginResponseObject interface {
	VisitGetLoginResponse(w http.ResponseWriter) error
}

type GetLogin302ResponseHeaders struct {
	Location string
}

type GetLogin302Response struct {
	Headers GetLogin302ResponseHeaders
}

func (response GetLogin302Response) VisitGetLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetLogoutRequestObject struct {
}

type GetLogoutResponseObject interface {
	VisitGetLogoutResponse(w http.ResponseWriter) error
}

type GetLogout302ResponseHeaders struct {
	Location string
}

type GetLogout302Response struct {
	Headers GetLogout302ResponseHeaders
}

func (response GetLogout302Response) VisitGetLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetLogout500TextResponse string

func (response GetLogout500TextResponse) VisitGetLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type ExtractMetadataRequestObject struct {
	Body *ExtractMetadataJSONRequestBody
}

type ExtractMetadataResponseObject interface {
	VisitExtractMetadataResponse(w http.ResponseWriter) error
}

type ExtractMetadata200ResponseHeaders struct {
	CacheControl string
	Connection   string
	ContentType  string
}

type ExtractMetadata200TexteventStreamResponse struct {
	Body          io.Reader
	Headers       ExtractMetadata200ResponseHeaders
	ContentLength int64
}

func (response ExtractMetadata200TexteventStreamResponse) VisitExtractMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Connection", fmt.Sprint(response.Headers.Connection))
	w.Header().Set("Content-Type", fmt.Sprint(response.Headers.ContentType))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ExtractMetadatadefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExtractMetadatadefaultJSONResponse) VisitExtractMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TransferControllerDeleteTransferRequestObject struct {
	Body *TransferControllerDeleteTransferJSONRequestBody
}

type TransferControllerDeleteTransferResponseObject interface {
	VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error
}

type TransferControllerDeleteTransfer200JSONResponse DeleteTransferResponse

func (response TransferControllerDeleteTransfer200JSONResponse) VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferControllerDeleteTransfer400TextResponse string

func (response TransferControllerDeleteTransfer400TextResponse) VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type TransferControllerGetTransferRequestObject struct {
	Params TransferControllerGetTransferParams
}

type TransferControllerGetTransferResponseObject interface {
	VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error
}

type TransferControllerGetTransfer200JSONResponse GetTransferResponse

func (response TransferControllerGetTransfer200JSONResponse) VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferControllerGetTransfer400TextResponse string

func (response TransferControllerGetTransfer400TextResponse) VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type OtherControllerGetVersionRequestObject struct {
}

type OtherControllerGetVersionResponseObject interface {
	VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error
}

type OtherControllerGetVersion200JSONResponse OtherVersionResponse

func (response OtherControllerGetVersion200JSONResponse) VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OtherControllerGetVersion400TextResponse string

func (response OtherControllerGetVersion400TextResponse) VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// OIDC callback
	// (GET /callback)
	GetCallback(ctx context.Context, request GetCallbackRequestObject) (GetCallbackResponseObject, error)
	// Get the available datasets.
	// (GET /dataset)
	DatasetControllerGetDataset(ctx context.Context, request DatasetControllerGetDatasetRequestObject) (DatasetControllerGetDatasetResponseObject, error)
	// Ingest a new dataset
	// (POST /dataset)
	DatasetControllerIngestDataset(ctx context.Context, request DatasetControllerIngestDatasetRequestObject) (DatasetControllerIngestDatasetResponseObject, error)
	// Get available extraction methods
	// (GET /extractor)
	ExtractorControllerGetExtractorMethods(ctx context.Context, request ExtractorControllerGetExtractorMethodsRequestObject) (ExtractorControllerGetExtractorMethodsResponseObject, error)
	// Get the health status.
	// (GET /health)
	OtherControllerGetHealth(ctx context.Context, request OtherControllerGetHealthRequestObject) (OtherControllerGetHealthResponseObject, error)
	// OIDC login
	// (GET /login)
	GetLogin(ctx context.Context, request GetLoginRequestObject) (GetLoginResponseObject, error)
	// end user session
	// (GET /logout)
	GetLogout(ctx context.Context, request GetLogoutRequestObject) (GetLogoutResponseObject, error)
	// get metadata of a dataset
	// (GET /metadata)
	ExtractMetadata(ctx context.Context, request ExtractMetadataRequestObject) (ExtractMetadataResponseObject, error)
	// Cancel a data transfer
	// (DELETE /transfer)
	TransferControllerDeleteTransfer(ctx context.Context, request TransferControllerDeleteTransferRequestObject) (TransferControllerDeleteTransferResponseObject, error)
	// Get list of transfers. Optional use the transferId parameter to only get one item.
	// (GET /transfer)
	TransferControllerGetTransfer(ctx context.Context, request TransferControllerGetTransferRequestObject) (TransferControllerGetTransferResponseObject, error)
	// Get the used ingestor version
	// (GET /version)
	OtherControllerGetVersion(ctx context.Context, request OtherControllerGetVersionRequestObject) (OtherControllerGetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCallback operation middleware
func (sh *strictHandler) GetCallback(ctx *gin.Context, params GetCallbackParams) {
	var request GetCallbackRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallback(ctx, request.(GetCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallbackResponseObject); ok {
		if err := validResponse.VisitGetCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DatasetControllerGetDataset operation middleware
func (sh *strictHandler) DatasetControllerGetDataset(ctx *gin.Context, params DatasetControllerGetDatasetParams) {
	var request DatasetControllerGetDatasetRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DatasetControllerGetDataset(ctx, request.(DatasetControllerGetDatasetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DatasetControllerGetDataset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DatasetControllerGetDatasetResponseObject); ok {
		if err := validResponse.VisitDatasetControllerGetDatasetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DatasetControllerIngestDataset operation middleware
func (sh *strictHandler) DatasetControllerIngestDataset(ctx *gin.Context) {
	var request DatasetControllerIngestDatasetRequestObject

	var body DatasetControllerIngestDatasetJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DatasetControllerIngestDataset(ctx, request.(DatasetControllerIngestDatasetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DatasetControllerIngestDataset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DatasetControllerIngestDatasetResponseObject); ok {
		if err := validResponse.VisitDatasetControllerIngestDatasetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtractorControllerGetExtractorMethods operation middleware
func (sh *strictHandler) ExtractorControllerGetExtractorMethods(ctx *gin.Context, params ExtractorControllerGetExtractorMethodsParams) {
	var request ExtractorControllerGetExtractorMethodsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtractorControllerGetExtractorMethods(ctx, request.(ExtractorControllerGetExtractorMethodsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtractorControllerGetExtractorMethods")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtractorControllerGetExtractorMethodsResponseObject); ok {
		if err := validResponse.VisitExtractorControllerGetExtractorMethodsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OtherControllerGetHealth operation middleware
func (sh *strictHandler) OtherControllerGetHealth(ctx *gin.Context) {
	var request OtherControllerGetHealthRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OtherControllerGetHealth(ctx, request.(OtherControllerGetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OtherControllerGetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OtherControllerGetHealthResponseObject); ok {
		if err := validResponse.VisitOtherControllerGetHealthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogin operation middleware
func (sh *strictHandler) GetLogin(ctx *gin.Context) {
	var request GetLoginRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogin(ctx, request.(GetLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLoginResponseObject); ok {
		if err := validResponse.VisitGetLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogout operation middleware
func (sh *strictHandler) GetLogout(ctx *gin.Context) {
	var request GetLogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogout(ctx, request.(GetLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLogoutResponseObject); ok {
		if err := validResponse.VisitGetLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtractMetadata operation middleware
func (sh *strictHandler) ExtractMetadata(ctx *gin.Context) {
	var request ExtractMetadataRequestObject

	var body ExtractMetadataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtractMetadata(ctx, request.(ExtractMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtractMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtractMetadataResponseObject); ok {
		if err := validResponse.VisitExtractMetadataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferControllerDeleteTransfer operation middleware
func (sh *strictHandler) TransferControllerDeleteTransfer(ctx *gin.Context) {
	var request TransferControllerDeleteTransferRequestObject

	var body TransferControllerDeleteTransferJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TransferControllerDeleteTransfer(ctx, request.(TransferControllerDeleteTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferControllerDeleteTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TransferControllerDeleteTransferResponseObject); ok {
		if err := validResponse.VisitTransferControllerDeleteTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferControllerGetTransfer operation middleware
func (sh *strictHandler) TransferControllerGetTransfer(ctx *gin.Context, params TransferControllerGetTransferParams) {
	var request TransferControllerGetTransferRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TransferControllerGetTransfer(ctx, request.(TransferControllerGetTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferControllerGetTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TransferControllerGetTransferResponseObject); ok {
		if err := validResponse.VisitTransferControllerGetTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OtherControllerGetVersion operation middleware
func (sh *strictHandler) OtherControllerGetVersion(ctx *gin.Context) {
	var request OtherControllerGetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OtherControllerGetVersion(ctx, request.(OtherControllerGetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OtherControllerGetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OtherControllerGetVersionResponseObject); ok {
		if err := validResponse.VisitOtherControllerGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jukuLgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
