// Package webserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package webserver

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// DeleteTransferRequest defines model for DeleteTransferRequest.
type DeleteTransferRequest struct {
	// IngestId Ingestion id to abort the ingestion
	IngestId *string `json:"ingestId,omitempty"`
}

// DeleteTransferResponse defines model for DeleteTransferResponse.
type DeleteTransferResponse struct {
	// IngestId Ingestion id to abort the ingestion
	IngestId *string `json:"ingestId,omitempty"`

	// Status New status of the ingestion.
	Status *string `json:"status,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetDatasetResponse defines model for GetDatasetResponse.
type GetDatasetResponse struct {
	Datasets []string `json:"datasets"`

	// Total Total number of datasets.
	Total int `json:"total"`
}

// GetExtractorResponse defines model for GetExtractorResponse.
type GetExtractorResponse struct {
	// Methods List of the metadata extraction method names configured in the ingestor
	Methods []MethodItem `json:"methods"`

	// Total Total number of methods
	Total int `json:"total"`
}

// GetMetadataRequest defines model for GetMetadataRequest.
type GetMetadataRequest struct {
	// FilePath The file path of the selected data record.
	FilePath string `json:"filePath"`

	// MethodName The selected methodName for data extraction.
	MethodName string `json:"methodName"`
}

// GetTransferResponse defines model for GetTransferResponse.
type GetTransferResponse struct {
	// Total Total number of transfers.
	Total     *int            `json:"total,omitempty"`
	Transfers *[]TransferItem `json:"transfers,omitempty"`
}

// MethodItem a method item describes the method's name and schema
type MethodItem struct {
	Name   string `json:"name"`
	Schema string `json:"schema"`
}

// OtherHealthResponse defines model for OtherHealthResponse.
type OtherHealthResponse struct {
	Errors *map[string]string `json:"errors,omitempty"`

	// Status Status of the ingestor.
	Status string `json:"status"`
}

// OtherVersionResponse defines model for OtherVersionResponse.
type OtherVersionResponse struct {
	// Version Version of the ingestor.
	Version *string `json:"version,omitempty"`
}

// PostDatasetRequest defines model for PostDatasetRequest.
type PostDatasetRequest struct {
	// MetaData The metadata of the dataset.
	MetaData string `json:"metaData"`
}

// PostDatasetResponse defines model for PostDatasetResponse.
type PostDatasetResponse struct {
	// IngestId The unique ingestion id of the dataset.
	IngestId *string `json:"ingestId,omitempty"`

	// Status The status of the ingestion. Can be used to send a message back to the ui.
	Status *string `json:"status,omitempty"`
}

// TransferItem defines model for TransferItem.
type TransferItem struct {
	Status     *string `json:"status,omitempty"`
	TransferId *string `json:"transferId,omitempty"`
}

// GetCallbackParams defines parameters for GetCallback.
type GetCallbackParams struct {
	// Code For handling the authorization code received from the OIDC provider
	Code string `form:"code" json:"code"`

	// State parameter for CSRF protection
	State string `form:"state" json:"state"`
}

// DatasetControllerGetDatasetParams defines parameters for DatasetControllerGetDataset.
type DatasetControllerGetDatasetParams struct {
	Page     *uint `form:"page,omitempty" json:"page,omitempty"`
	PageSize *uint `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// ExtractorControllerGetExtractorMethodsParams defines parameters for ExtractorControllerGetExtractorMethods.
type ExtractorControllerGetExtractorMethodsParams struct {
	Page     *uint `form:"page,omitempty" json:"page,omitempty"`
	PageSize *uint `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// TransferControllerGetTransferParams defines parameters for TransferControllerGetTransfer.
type TransferControllerGetTransferParams struct {
	TransferId *string `form:"transferId,omitempty" json:"transferId,omitempty"`
	Page       *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize   *int    `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DatasetControllerIngestDatasetJSONRequestBody defines body for DatasetControllerIngestDataset for application/json ContentType.
type DatasetControllerIngestDatasetJSONRequestBody = PostDatasetRequest

// ExtractMetadataJSONRequestBody defines body for ExtractMetadata for application/json ContentType.
type ExtractMetadataJSONRequestBody = GetMetadataRequest

// TransferControllerDeleteTransferJSONRequestBody defines body for TransferControllerDeleteTransfer for application/json ContentType.
type TransferControllerDeleteTransferJSONRequestBody = DeleteTransferRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OIDC callback
	// (GET /callback)
	GetCallback(c *gin.Context, params GetCallbackParams)
	// Get the available datasets.
	// (GET /dataset)
	DatasetControllerGetDataset(c *gin.Context, params DatasetControllerGetDatasetParams)
	// Ingest a new dataset
	// (POST /dataset)
	DatasetControllerIngestDataset(c *gin.Context)
	// Get available extraction methods
	// (GET /extractor)
	ExtractorControllerGetExtractorMethods(c *gin.Context, params ExtractorControllerGetExtractorMethodsParams)
	// Get the health status.
	// (GET /health)
	OtherControllerGetHealth(c *gin.Context)
	// OIDC login
	// (GET /login)
	GetLogin(c *gin.Context)
	// end user session
	// (GET /logout)
	GetLogout(c *gin.Context)
	// get metadata of a dataset
	// (GET /metadata)
	ExtractMetadata(c *gin.Context)
	// Cancel a data transfer
	// (DELETE /transfer)
	TransferControllerDeleteTransfer(c *gin.Context)
	// Get list of transfers. Optional use the transferId parameter to only get one item.
	// (GET /transfer)
	TransferControllerGetTransfer(c *gin.Context, params TransferControllerGetTransferParams)
	// Get the used ingestor version
	// (GET /version)
	OtherControllerGetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCallback operation middleware
func (siw *ServerInterfaceWrapper) GetCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCallback(c, params)
}

// DatasetControllerGetDataset operation middleware
func (siw *ServerInterfaceWrapper) DatasetControllerGetDataset(c *gin.Context) {

	var err error

	c.Set(CookieAuthScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DatasetControllerGetDatasetParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DatasetControllerGetDataset(c, params)
}

// DatasetControllerIngestDataset operation middleware
func (siw *ServerInterfaceWrapper) DatasetControllerIngestDataset(c *gin.Context) {

	c.Set(CookieAuthScopes, []string{"ingestor_write"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DatasetControllerIngestDataset(c)
}

// ExtractorControllerGetExtractorMethods operation middleware
func (siw *ServerInterfaceWrapper) ExtractorControllerGetExtractorMethods(c *gin.Context) {

	var err error

	c.Set(CookieAuthScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExtractorControllerGetExtractorMethodsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtractorControllerGetExtractorMethods(c, params)
}

// OtherControllerGetHealth operation middleware
func (siw *ServerInterfaceWrapper) OtherControllerGetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OtherControllerGetHealth(c)
}

// GetLogin operation middleware
func (siw *ServerInterfaceWrapper) GetLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogin(c)
}

// GetLogout operation middleware
func (siw *ServerInterfaceWrapper) GetLogout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogout(c)
}

// ExtractMetadata operation middleware
func (siw *ServerInterfaceWrapper) ExtractMetadata(c *gin.Context) {

	c.Set(CookieAuthScopes, []string{"ingestor_read", "ingestor_write", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtractMetadata(c)
}

// TransferControllerDeleteTransfer operation middleware
func (siw *ServerInterfaceWrapper) TransferControllerDeleteTransfer(c *gin.Context) {

	c.Set(CookieAuthScopes, []string{"ingestor_write"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferControllerDeleteTransfer(c)
}

// TransferControllerGetTransfer operation middleware
func (siw *ServerInterfaceWrapper) TransferControllerGetTransfer(c *gin.Context) {

	var err error

	c.Set(CookieAuthScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params TransferControllerGetTransferParams

	// ------------- Optional query parameter "transferId" -------------

	err = runtime.BindQueryParameter("form", true, false, "transferId", c.Request.URL.Query(), &params.TransferId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transferId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferControllerGetTransfer(c, params)
}

// OtherControllerGetVersion operation middleware
func (siw *ServerInterfaceWrapper) OtherControllerGetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OtherControllerGetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/callback", wrapper.GetCallback)
	router.GET(options.BaseURL+"/dataset", wrapper.DatasetControllerGetDataset)
	router.POST(options.BaseURL+"/dataset", wrapper.DatasetControllerIngestDataset)
	router.GET(options.BaseURL+"/extractor", wrapper.ExtractorControllerGetExtractorMethods)
	router.GET(options.BaseURL+"/health", wrapper.OtherControllerGetHealth)
	router.GET(options.BaseURL+"/login", wrapper.GetLogin)
	router.GET(options.BaseURL+"/logout", wrapper.GetLogout)
	router.GET(options.BaseURL+"/metadata", wrapper.ExtractMetadata)
	router.DELETE(options.BaseURL+"/transfer", wrapper.TransferControllerDeleteTransfer)
	router.GET(options.BaseURL+"/transfer", wrapper.TransferControllerGetTransfer)
	router.GET(options.BaseURL+"/version", wrapper.OtherControllerGetVersion)
}

type GetCallbackRequestObject struct {
	Params GetCallbackParams
}

type GetCallbackResponseObject interface {
	VisitGetCallbackResponse(w http.ResponseWriter) error
}

type GetCallback302ResponseHeaders struct {
	Location string
}

type GetCallback302Response struct {
	Headers GetCallback302ResponseHeaders
}

func (response GetCallback302Response) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetCallback400TextResponse string

func (response GetCallback400TextResponse) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetCallback500TextResponse string

func (response GetCallback500TextResponse) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type DatasetControllerGetDatasetRequestObject struct {
	Params DatasetControllerGetDatasetParams
}

type DatasetControllerGetDatasetResponseObject interface {
	VisitDatasetControllerGetDatasetResponse(w http.ResponseWriter) error
}

type DatasetControllerGetDataset200JSONResponse GetDatasetResponse

func (response DatasetControllerGetDataset200JSONResponse) VisitDatasetControllerGetDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DatasetControllerGetDataset400TextResponse string

func (response DatasetControllerGetDataset400TextResponse) VisitDatasetControllerGetDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type DatasetControllerIngestDatasetRequestObject struct {
	Body *DatasetControllerIngestDatasetJSONRequestBody
}

type DatasetControllerIngestDatasetResponseObject interface {
	VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error
}

type DatasetControllerIngestDataset200JSONResponse PostDatasetResponse

func (response DatasetControllerIngestDataset200JSONResponse) VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DatasetControllerIngestDataset400TextResponse string

func (response DatasetControllerIngestDataset400TextResponse) VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type ExtractorControllerGetExtractorMethodsRequestObject struct {
	Params ExtractorControllerGetExtractorMethodsParams
}

type ExtractorControllerGetExtractorMethodsResponseObject interface {
	VisitExtractorControllerGetExtractorMethodsResponse(w http.ResponseWriter) error
}

type ExtractorControllerGetExtractorMethods200JSONResponse GetExtractorResponse

func (response ExtractorControllerGetExtractorMethods200JSONResponse) VisitExtractorControllerGetExtractorMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OtherControllerGetHealthRequestObject struct {
}

type OtherControllerGetHealthResponseObject interface {
	VisitOtherControllerGetHealthResponse(w http.ResponseWriter) error
}

type OtherControllerGetHealth200JSONResponse OtherHealthResponse

func (response OtherControllerGetHealth200JSONResponse) VisitOtherControllerGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OtherControllerGetHealth400TextResponse string

func (response OtherControllerGetHealth400TextResponse) VisitOtherControllerGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetLoginRequestObject struct {
}

type GetLoginResponseObject interface {
	VisitGetLoginResponse(w http.ResponseWriter) error
}

type GetLogin302ResponseHeaders struct {
	Location string
}

type GetLogin302Response struct {
	Headers GetLogin302ResponseHeaders
}

func (response GetLogin302Response) VisitGetLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetLogoutRequestObject struct {
}

type GetLogoutResponseObject interface {
	VisitGetLogoutResponse(w http.ResponseWriter) error
}

type GetLogout302ResponseHeaders struct {
	Location string
}

type GetLogout302Response struct {
	Headers GetLogout302ResponseHeaders
}

func (response GetLogout302Response) VisitGetLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetLogout500TextResponse string

func (response GetLogout500TextResponse) VisitGetLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type ExtractMetadataRequestObject struct {
	Body *ExtractMetadataJSONRequestBody
}

type ExtractMetadataResponseObject interface {
	VisitExtractMetadataResponse(w http.ResponseWriter) error
}

type ExtractMetadata200ResponseHeaders struct {
	CacheControl string
	Connection   string
	ContentType  string
}

type ExtractMetadata200TexteventStreamResponse struct {
	Body          io.Reader
	Headers       ExtractMetadata200ResponseHeaders
	ContentLength int64
}

func (response ExtractMetadata200TexteventStreamResponse) VisitExtractMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Connection", fmt.Sprint(response.Headers.Connection))
	w.Header().Set("Content-Type", fmt.Sprint(response.Headers.ContentType))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ExtractMetadatadefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExtractMetadatadefaultJSONResponse) VisitExtractMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TransferControllerDeleteTransferRequestObject struct {
	Body *TransferControllerDeleteTransferJSONRequestBody
}

type TransferControllerDeleteTransferResponseObject interface {
	VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error
}

type TransferControllerDeleteTransfer200JSONResponse DeleteTransferResponse

func (response TransferControllerDeleteTransfer200JSONResponse) VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferControllerDeleteTransfer400TextResponse string

func (response TransferControllerDeleteTransfer400TextResponse) VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type TransferControllerGetTransferRequestObject struct {
	Params TransferControllerGetTransferParams
}

type TransferControllerGetTransferResponseObject interface {
	VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error
}

type TransferControllerGetTransfer200JSONResponse GetTransferResponse

func (response TransferControllerGetTransfer200JSONResponse) VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferControllerGetTransfer400TextResponse string

func (response TransferControllerGetTransfer400TextResponse) VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type OtherControllerGetVersionRequestObject struct {
}

type OtherControllerGetVersionResponseObject interface {
	VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error
}

type OtherControllerGetVersion200JSONResponse OtherVersionResponse

func (response OtherControllerGetVersion200JSONResponse) VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OtherControllerGetVersion400TextResponse string

func (response OtherControllerGetVersion400TextResponse) VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// OIDC callback
	// (GET /callback)
	GetCallback(ctx context.Context, request GetCallbackRequestObject) (GetCallbackResponseObject, error)
	// Get the available datasets.
	// (GET /dataset)
	DatasetControllerGetDataset(ctx context.Context, request DatasetControllerGetDatasetRequestObject) (DatasetControllerGetDatasetResponseObject, error)
	// Ingest a new dataset
	// (POST /dataset)
	DatasetControllerIngestDataset(ctx context.Context, request DatasetControllerIngestDatasetRequestObject) (DatasetControllerIngestDatasetResponseObject, error)
	// Get available extraction methods
	// (GET /extractor)
	ExtractorControllerGetExtractorMethods(ctx context.Context, request ExtractorControllerGetExtractorMethodsRequestObject) (ExtractorControllerGetExtractorMethodsResponseObject, error)
	// Get the health status.
	// (GET /health)
	OtherControllerGetHealth(ctx context.Context, request OtherControllerGetHealthRequestObject) (OtherControllerGetHealthResponseObject, error)
	// OIDC login
	// (GET /login)
	GetLogin(ctx context.Context, request GetLoginRequestObject) (GetLoginResponseObject, error)
	// end user session
	// (GET /logout)
	GetLogout(ctx context.Context, request GetLogoutRequestObject) (GetLogoutResponseObject, error)
	// get metadata of a dataset
	// (GET /metadata)
	ExtractMetadata(ctx context.Context, request ExtractMetadataRequestObject) (ExtractMetadataResponseObject, error)
	// Cancel a data transfer
	// (DELETE /transfer)
	TransferControllerDeleteTransfer(ctx context.Context, request TransferControllerDeleteTransferRequestObject) (TransferControllerDeleteTransferResponseObject, error)
	// Get list of transfers. Optional use the transferId parameter to only get one item.
	// (GET /transfer)
	TransferControllerGetTransfer(ctx context.Context, request TransferControllerGetTransferRequestObject) (TransferControllerGetTransferResponseObject, error)
	// Get the used ingestor version
	// (GET /version)
	OtherControllerGetVersion(ctx context.Context, request OtherControllerGetVersionRequestObject) (OtherControllerGetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCallback operation middleware
func (sh *strictHandler) GetCallback(ctx *gin.Context, params GetCallbackParams) {
	var request GetCallbackRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallback(ctx, request.(GetCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallbackResponseObject); ok {
		if err := validResponse.VisitGetCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DatasetControllerGetDataset operation middleware
func (sh *strictHandler) DatasetControllerGetDataset(ctx *gin.Context, params DatasetControllerGetDatasetParams) {
	var request DatasetControllerGetDatasetRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DatasetControllerGetDataset(ctx, request.(DatasetControllerGetDatasetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DatasetControllerGetDataset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DatasetControllerGetDatasetResponseObject); ok {
		if err := validResponse.VisitDatasetControllerGetDatasetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DatasetControllerIngestDataset operation middleware
func (sh *strictHandler) DatasetControllerIngestDataset(ctx *gin.Context) {
	var request DatasetControllerIngestDatasetRequestObject

	var body DatasetControllerIngestDatasetJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DatasetControllerIngestDataset(ctx, request.(DatasetControllerIngestDatasetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DatasetControllerIngestDataset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DatasetControllerIngestDatasetResponseObject); ok {
		if err := validResponse.VisitDatasetControllerIngestDatasetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtractorControllerGetExtractorMethods operation middleware
func (sh *strictHandler) ExtractorControllerGetExtractorMethods(ctx *gin.Context, params ExtractorControllerGetExtractorMethodsParams) {
	var request ExtractorControllerGetExtractorMethodsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtractorControllerGetExtractorMethods(ctx, request.(ExtractorControllerGetExtractorMethodsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtractorControllerGetExtractorMethods")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtractorControllerGetExtractorMethodsResponseObject); ok {
		if err := validResponse.VisitExtractorControllerGetExtractorMethodsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OtherControllerGetHealth operation middleware
func (sh *strictHandler) OtherControllerGetHealth(ctx *gin.Context) {
	var request OtherControllerGetHealthRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OtherControllerGetHealth(ctx, request.(OtherControllerGetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OtherControllerGetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OtherControllerGetHealthResponseObject); ok {
		if err := validResponse.VisitOtherControllerGetHealthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogin operation middleware
func (sh *strictHandler) GetLogin(ctx *gin.Context) {
	var request GetLoginRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogin(ctx, request.(GetLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLoginResponseObject); ok {
		if err := validResponse.VisitGetLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogout operation middleware
func (sh *strictHandler) GetLogout(ctx *gin.Context) {
	var request GetLogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogout(ctx, request.(GetLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLogoutResponseObject); ok {
		if err := validResponse.VisitGetLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtractMetadata operation middleware
func (sh *strictHandler) ExtractMetadata(ctx *gin.Context) {
	var request ExtractMetadataRequestObject

	var body ExtractMetadataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtractMetadata(ctx, request.(ExtractMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtractMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtractMetadataResponseObject); ok {
		if err := validResponse.VisitExtractMetadataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferControllerDeleteTransfer operation middleware
func (sh *strictHandler) TransferControllerDeleteTransfer(ctx *gin.Context) {
	var request TransferControllerDeleteTransferRequestObject

	var body TransferControllerDeleteTransferJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TransferControllerDeleteTransfer(ctx, request.(TransferControllerDeleteTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferControllerDeleteTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TransferControllerDeleteTransferResponseObject); ok {
		if err := validResponse.VisitTransferControllerDeleteTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferControllerGetTransfer operation middleware
func (sh *strictHandler) TransferControllerGetTransfer(ctx *gin.Context, params TransferControllerGetTransferParams) {
	var request TransferControllerGetTransferRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TransferControllerGetTransfer(ctx, request.(TransferControllerGetTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferControllerGetTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TransferControllerGetTransferResponseObject); ok {
		if err := validResponse.VisitTransferControllerGetTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OtherControllerGetVersion operation middleware
func (sh *strictHandler) OtherControllerGetVersion(ctx *gin.Context) {
	var request OtherControllerGetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OtherControllerGetVersion(ctx, request.(OtherControllerGetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OtherControllerGetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OtherControllerGetVersionResponseObject); ok {
		if err := validResponse.VisitOtherControllerGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
