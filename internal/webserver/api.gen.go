// Package webserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package webserver

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OpenIDScopes = "OpenID.Scopes"
)

// IngestorUiDeleteTransferRequest defines model for IngestorUiDeleteTransferRequest.
type IngestorUiDeleteTransferRequest struct {
	// IngestId Ingestion id to abort the ingestion
	IngestId *string `json:"ingestId,omitempty"`
}

// IngestorUiDeleteTransferResponse defines model for IngestorUiDeleteTransferResponse.
type IngestorUiDeleteTransferResponse struct {
	// IngestId Ingestion id to abort the ingestion
	IngestId *string `json:"ingestId,omitempty"`

	// Status New status of the ingestion.
	Status *string `json:"status,omitempty"`
}

// IngestorUiGetTransferItem defines model for IngestorUiGetTransferItem.
type IngestorUiGetTransferItem struct {
	Status     *string `json:"status,omitempty"`
	TransferId *string `json:"transferId,omitempty"`
}

// IngestorUiGetTransferResponse defines model for IngestorUiGetTransferResponse.
type IngestorUiGetTransferResponse struct {
	// Total Total number of transfers.
	Total     *int                         `json:"total,omitempty"`
	Transfers *[]IngestorUiGetTransferItem `json:"transfers,omitempty"`
}

// IngestorUiOtherVersionResponse defines model for IngestorUiOtherVersionResponse.
type IngestorUiOtherVersionResponse struct {
	// Version Version of the ingestor.
	Version *string `json:"version,omitempty"`
}

// IngestorUiPostDatasetRequest defines model for IngestorUiPostDatasetRequest.
type IngestorUiPostDatasetRequest struct {
	// MetaData The metadata of the dataset.
	MetaData *string `json:"metaData,omitempty"`
}

// IngestorUiPostDatasetResponse defines model for IngestorUiPostDatasetResponse.
type IngestorUiPostDatasetResponse struct {
	// IngestId The unique ingestion id of the dataset.
	IngestId *string `json:"ingestId,omitempty"`

	// Status The status of the ingestion. Can be used to send a message back to the ui.
	Status *string `json:"status,omitempty"`
}

// GetCallbackParams defines parameters for GetCallback.
type GetCallbackParams struct {
	// Code For handling the authorization code received from the OIDC provider
	Code string `form:"code" json:"code"`

	// State State parameter for CSRF protection
	State string `form:"state" json:"state"`

	// SavedState The state saved at login
	SavedState string `form:"saved-state" json:"saved-state"`
}

// TransferControllerGetTransferParams defines parameters for TransferControllerGetTransfer.
type TransferControllerGetTransferParams struct {
	TransferId *string `form:"transferId,omitempty" json:"transferId,omitempty"`
	Page       *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize   *int    `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DatasetControllerIngestDatasetJSONRequestBody defines body for DatasetControllerIngestDataset for application/json ContentType.
type DatasetControllerIngestDatasetJSONRequestBody = IngestorUiPostDatasetRequest

// TransferControllerDeleteTransferJSONRequestBody defines body for TransferControllerDeleteTransfer for application/json ContentType.
type TransferControllerDeleteTransferJSONRequestBody = IngestorUiDeleteTransferRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OIDC callback
	// (GET /callback)
	GetCallback(c *gin.Context, params GetCallbackParams)
	// Ingest a new dataset
	// (POST /dataset)
	DatasetControllerIngestDataset(c *gin.Context)
	// OIDC login
	// (GET /login)
	GetLogin(c *gin.Context)
	// Cancel a data transfer
	// (DELETE /transfer)
	TransferControllerDeleteTransfer(c *gin.Context)
	// Get list of transfers. Optional use the transferId parameter to only get one item.
	// (GET /transfer)
	TransferControllerGetTransfer(c *gin.Context, params TransferControllerGetTransferParams)
	// Get the used ingestor version
	// (GET /version)
	OtherControllerGetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCallback operation middleware
func (siw *ServerInterfaceWrapper) GetCallback(c *gin.Context) {

	var err error

	c.Set(OpenIDScopes, []string{"ingestor_read", "ingestor_write", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	{
		var cookie string

		if cookie, err = c.Cookie("saved-state"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "saved-state", cookie, &value, runtime.BindStyledParameterOptions{Explode: true, Required: true})
			if err != nil {
				siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter saved-state: %w", err), http.StatusBadRequest)
				return
			}
			params.SavedState = value

		} else {
			siw.ErrorHandler(c, fmt.Errorf("Query argument saved-state is required, but not found"), http.StatusBadRequest)
			return
		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCallback(c, params)
}

// DatasetControllerIngestDataset operation middleware
func (siw *ServerInterfaceWrapper) DatasetControllerIngestDataset(c *gin.Context) {

	c.Set(OpenIDScopes, []string{"ingestor_write"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DatasetControllerIngestDataset(c)
}

// GetLogin operation middleware
func (siw *ServerInterfaceWrapper) GetLogin(c *gin.Context) {

	c.Set(OpenIDScopes, []string{"ingestor_read", "ingestor_write", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLogin(c)
}

// TransferControllerDeleteTransfer operation middleware
func (siw *ServerInterfaceWrapper) TransferControllerDeleteTransfer(c *gin.Context) {

	c.Set(OpenIDScopes, []string{"ingestor_write"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferControllerDeleteTransfer(c)
}

// TransferControllerGetTransfer operation middleware
func (siw *ServerInterfaceWrapper) TransferControllerGetTransfer(c *gin.Context) {

	var err error

	c.Set(OpenIDScopes, []string{"ingestor_read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params TransferControllerGetTransferParams

	// ------------- Optional query parameter "transferId" -------------

	err = runtime.BindQueryParameter("form", true, false, "transferId", c.Request.URL.Query(), &params.TransferId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transferId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferControllerGetTransfer(c, params)
}

// OtherControllerGetVersion operation middleware
func (siw *ServerInterfaceWrapper) OtherControllerGetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OtherControllerGetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/callback", wrapper.GetCallback)
	router.POST(options.BaseURL+"/dataset", wrapper.DatasetControllerIngestDataset)
	router.GET(options.BaseURL+"/login", wrapper.GetLogin)
	router.DELETE(options.BaseURL+"/transfer", wrapper.TransferControllerDeleteTransfer)
	router.GET(options.BaseURL+"/transfer", wrapper.TransferControllerGetTransfer)
	router.GET(options.BaseURL+"/version", wrapper.OtherControllerGetVersion)
}

type GetCallbackRequestObject struct {
	Params GetCallbackParams
}

type GetCallbackResponseObject interface {
	VisitGetCallbackResponse(w http.ResponseWriter) error
}

type GetCallback200JSONResponse struct {
	// AccessToken access token of session
	AccessToken *string `json:"access_token,omitempty"`

	// Email email of logged-in user
	Email *string `json:"email,omitempty"`

	// IdToken id token of session
	IdToken *string `json:"id_token,omitempty"`

	// Name name of logged-in user
	Name *string `json:"name,omitempty"`
}

func (response GetCallback200JSONResponse) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCallback400TextResponse string

func (response GetCallback400TextResponse) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetCallback500Response struct {
}

func (response GetCallback500Response) VisitGetCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DatasetControllerIngestDatasetRequestObject struct {
	Body *DatasetControllerIngestDatasetJSONRequestBody
}

type DatasetControllerIngestDatasetResponseObject interface {
	VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error
}

type DatasetControllerIngestDataset200JSONResponse IngestorUiPostDatasetResponse

func (response DatasetControllerIngestDataset200JSONResponse) VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DatasetControllerIngestDataset400TextResponse string

func (response DatasetControllerIngestDataset400TextResponse) VisitDatasetControllerIngestDatasetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetLoginRequestObject struct {
}

type GetLoginResponseObject interface {
	VisitGetLoginResponse(w http.ResponseWriter) error
}

type GetLogin302ResponseHeaders struct {
	SetCookie string
	Location  string
}

type GetLogin302Response struct {
	Headers GetLogin302ResponseHeaders
}

func (response GetLogin302Response) VisitGetLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type TransferControllerDeleteTransferRequestObject struct {
	Body *TransferControllerDeleteTransferJSONRequestBody
}

type TransferControllerDeleteTransferResponseObject interface {
	VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error
}

type TransferControllerDeleteTransfer200JSONResponse IngestorUiDeleteTransferResponse

func (response TransferControllerDeleteTransfer200JSONResponse) VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferControllerDeleteTransfer400TextResponse string

func (response TransferControllerDeleteTransfer400TextResponse) VisitTransferControllerDeleteTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type TransferControllerGetTransferRequestObject struct {
	Params TransferControllerGetTransferParams
}

type TransferControllerGetTransferResponseObject interface {
	VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error
}

type TransferControllerGetTransfer200JSONResponse IngestorUiGetTransferResponse

func (response TransferControllerGetTransfer200JSONResponse) VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferControllerGetTransfer400TextResponse string

func (response TransferControllerGetTransfer400TextResponse) VisitTransferControllerGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type OtherControllerGetVersionRequestObject struct {
}

type OtherControllerGetVersionResponseObject interface {
	VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error
}

type OtherControllerGetVersion200JSONResponse IngestorUiOtherVersionResponse

func (response OtherControllerGetVersion200JSONResponse) VisitOtherControllerGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// OIDC callback
	// (GET /callback)
	GetCallback(ctx context.Context, request GetCallbackRequestObject) (GetCallbackResponseObject, error)
	// Ingest a new dataset
	// (POST /dataset)
	DatasetControllerIngestDataset(ctx context.Context, request DatasetControllerIngestDatasetRequestObject) (DatasetControllerIngestDatasetResponseObject, error)
	// OIDC login
	// (GET /login)
	GetLogin(ctx context.Context, request GetLoginRequestObject) (GetLoginResponseObject, error)
	// Cancel a data transfer
	// (DELETE /transfer)
	TransferControllerDeleteTransfer(ctx context.Context, request TransferControllerDeleteTransferRequestObject) (TransferControllerDeleteTransferResponseObject, error)
	// Get list of transfers. Optional use the transferId parameter to only get one item.
	// (GET /transfer)
	TransferControllerGetTransfer(ctx context.Context, request TransferControllerGetTransferRequestObject) (TransferControllerGetTransferResponseObject, error)
	// Get the used ingestor version
	// (GET /version)
	OtherControllerGetVersion(ctx context.Context, request OtherControllerGetVersionRequestObject) (OtherControllerGetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCallback operation middleware
func (sh *strictHandler) GetCallback(ctx *gin.Context, params GetCallbackParams) {
	var request GetCallbackRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallback(ctx, request.(GetCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallbackResponseObject); ok {
		if err := validResponse.VisitGetCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DatasetControllerIngestDataset operation middleware
func (sh *strictHandler) DatasetControllerIngestDataset(ctx *gin.Context) {
	var request DatasetControllerIngestDatasetRequestObject

	var body DatasetControllerIngestDatasetJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DatasetControllerIngestDataset(ctx, request.(DatasetControllerIngestDatasetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DatasetControllerIngestDataset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DatasetControllerIngestDatasetResponseObject); ok {
		if err := validResponse.VisitDatasetControllerIngestDatasetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogin operation middleware
func (sh *strictHandler) GetLogin(ctx *gin.Context) {
	var request GetLoginRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogin(ctx, request.(GetLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLoginResponseObject); ok {
		if err := validResponse.VisitGetLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferControllerDeleteTransfer operation middleware
func (sh *strictHandler) TransferControllerDeleteTransfer(ctx *gin.Context) {
	var request TransferControllerDeleteTransferRequestObject

	var body TransferControllerDeleteTransferJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TransferControllerDeleteTransfer(ctx, request.(TransferControllerDeleteTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferControllerDeleteTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TransferControllerDeleteTransferResponseObject); ok {
		if err := validResponse.VisitTransferControllerDeleteTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferControllerGetTransfer operation middleware
func (sh *strictHandler) TransferControllerGetTransfer(ctx *gin.Context, params TransferControllerGetTransferParams) {
	var request TransferControllerGetTransferRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TransferControllerGetTransfer(ctx, request.(TransferControllerGetTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferControllerGetTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TransferControllerGetTransferResponseObject); ok {
		if err := validResponse.VisitTransferControllerGetTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OtherControllerGetVersion operation middleware
func (sh *strictHandler) OtherControllerGetVersion(ctx *gin.Context) {
	var request OtherControllerGetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OtherControllerGetVersion(ctx, request.(OtherControllerGetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OtherControllerGetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OtherControllerGetVersionResponseObject); ok {
		if err := validResponse.VisitOtherControllerGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"sC6vB6Uororp9nr7bwAAAP//xpxuDJkXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
