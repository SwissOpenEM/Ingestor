// Package s3upload provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package s3upload

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	SciCatAuthScopes = "SciCatAuth.Scopes"
)

// AbortUploadBody defines model for AbortUploadBody.
type AbortUploadBody struct {
	ObjectName string `json:"object_name"`
	UploadId   string `json:"upload_id"`
}

// AbortUploadResp defines model for AbortUploadResp.
type AbortUploadResp struct {
	Message    string `json:"message"`
	ObjectName string `json:"object_name"`
	UploadId   string `json:"upload_id"`
}

// CompletePart defines model for CompletePart.
type CompletePart struct {
	ChecksumSha256 string `json:"checksum_sha256"`
	Etag           string `json:"etag"`
	PartNumber     int    `json:"part_number"`
}

// CompleteUploadBody defines model for CompleteUploadBody.
type CompleteUploadBody struct {
	ChecksumSha256 string         `json:"checksum_sha256"`
	ObjectName     string         `json:"object_name"`
	Parts          []CompletePart `json:"parts"`
	UploadId       string         `json:"upload_id"`
}

// CompleteUploadResp defines model for CompleteUploadResp.
type CompleteUploadResp struct {
	Key      string `json:"key"`
	Location string `json:"location"`
}

// CreateServiceTokenResp defines model for CreateServiceTokenResp.
type CreateServiceTokenResp struct {
	// AccessToken The JWT access token
	AccessToken string `json:"access_token"`

	// ExpiresIn The duration in seconds the access token is valid for
	ExpiresIn *int `json:"expires_in,omitempty"`

	// NotBeforePolicy Timestamp that indicates the time before which the JWT must not be accepted for processing
	NotBeforePolicy *int `json:"not-before-policy,omitempty"`

	// RefreshExpiresIn The duration in seconds the refresh token is valid for
	RefreshExpiresIn *int `json:"refresh_expires_in,omitempty"`

	// RefreshToken The JWT refresh token
	RefreshToken string `json:"refresh_token"`

	// Scope Claim in a JWT defines the set of permissions or access rights granted
	Scope *string `json:"scope,omitempty"`

	// SessionState Session id, identifier that uniquely ties the session to the authenticated user
	SessionState *string `json:"session_state,omitempty"`

	// TokenType Bearer
	TokenType *string `json:"token_type,omitempty"`
}

// FinalizeDatasetUploadBody defines model for FinalizeDatasetUploadBody.
type FinalizeDatasetUploadBody struct {
	ContactEmail       openapi_types.Email `json:"contact_email"`
	CreateArchivingJob bool                `json:"create_archiving_job"`
	DatasetPid         string              `json:"dataset_pid"`
	OwnerGroup         string              `json:"owner_group"`
	OwnerUser          string              `json:"owner_user"`
}

// FinalizeDatasetUploadResp defines model for FinalizeDatasetUploadResp.
type FinalizeDatasetUploadResp struct {
	DatasetId string `json:"dataset_id"`
	Message   string `json:"message"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// InternalError defines model for InternalError.
type InternalError struct {
	// Code A specific error code indicating the error type
	Code string `json:"code"`

	// Details Additional context or information about the error
	Details *string `json:"details,omitempty"`

	// Message A human-readable message providing more details about the error
	Message string `json:"message"`

	// Timestamp The time when the error occurred
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// PresignedUrlBody defines model for PresignedUrlBody.
type PresignedUrlBody struct {
	ObjectName string `json:"object_name"`
	Parts      int    `json:"parts"`
}

// PresignedUrlResp defines model for PresignedUrlResp.
type PresignedUrlResp struct {
	UploadId string   `json:"upload_id"`
	Urls     []string `json:"urls"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationErrorLocInner `json:"loc"`
	Msg  string                    `json:"msg"`
	Type string                    `json:"type"`
}

// ValidationErrorLocInner defines model for ValidationError_loc_inner.
type ValidationErrorLocInner struct {
	union json.RawMessage
}

// ValidationErrorLocInner0 defines model for .
type ValidationErrorLocInner0 = string

// ValidationErrorLocInner1 defines model for .
type ValidationErrorLocInner1 = int

// AbortMultipartUploadJSONRequestBody defines body for AbortMultipartUpload for application/json ContentType.
type AbortMultipartUploadJSONRequestBody = AbortUploadBody

// CompleteUploadJSONRequestBody defines body for CompleteUpload for application/json ContentType.
type CompleteUploadJSONRequestBody = CompleteUploadBody

// FinalizeDatasetUploadJSONRequestBody defines body for FinalizeDatasetUpload for application/json ContentType.
type FinalizeDatasetUploadJSONRequestBody = FinalizeDatasetUploadBody

// GetPresignedUrlsJSONRequestBody defines body for GetPresignedUrls for application/json ContentType.
type GetPresignedUrlsJSONRequestBody = PresignedUrlBody

// AsValidationErrorLocInner0 returns the union data inside the ValidationErrorLocInner as a ValidationErrorLocInner0
func (t ValidationErrorLocInner) AsValidationErrorLocInner0() (ValidationErrorLocInner0, error) {
	var body ValidationErrorLocInner0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLocInner0 overwrites any union data inside the ValidationErrorLocInner as the provided ValidationErrorLocInner0
func (t *ValidationErrorLocInner) FromValidationErrorLocInner0(v ValidationErrorLocInner0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLocInner0 performs a merge with any union data inside the ValidationErrorLocInner, using the provided ValidationErrorLocInner0
func (t *ValidationErrorLocInner) MergeValidationErrorLocInner0(v ValidationErrorLocInner0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLocInner1 returns the union data inside the ValidationErrorLocInner as a ValidationErrorLocInner1
func (t ValidationErrorLocInner) AsValidationErrorLocInner1() (ValidationErrorLocInner1, error) {
	var body ValidationErrorLocInner1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLocInner1 overwrites any union data inside the ValidationErrorLocInner as the provided ValidationErrorLocInner1
func (t *ValidationErrorLocInner) FromValidationErrorLocInner1(v ValidationErrorLocInner1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLocInner1 performs a merge with any union data inside the ValidationErrorLocInner, using the provided ValidationErrorLocInner1
func (t *ValidationErrorLocInner) MergeValidationErrorLocInner1(v ValidationErrorLocInner1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationErrorLocInner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationErrorLocInner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AbortMultipartUploadWithBody request with any body
	AbortMultipartUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AbortMultipartUpload(ctx context.Context, body AbortMultipartUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteUploadWithBody request with any body
	CompleteUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteUpload(ctx context.Context, body CompleteUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FinalizeDatasetUploadWithBody request with any body
	FinalizeDatasetUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FinalizeDatasetUpload(ctx context.Context, body FinalizeDatasetUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPresignedUrlsWithBody request with any body
	GetPresignedUrlsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPresignedUrls(ctx context.Context, body GetPresignedUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNewServiceToken request
	CreateNewServiceToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AbortMultipartUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAbortMultipartUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AbortMultipartUpload(ctx context.Context, body AbortMultipartUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAbortMultipartUploadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteUpload(ctx context.Context, body CompleteUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteUploadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinalizeDatasetUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinalizeDatasetUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinalizeDatasetUpload(ctx context.Context, body FinalizeDatasetUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinalizeDatasetUploadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPresignedUrlsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPresignedUrlsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPresignedUrls(ctx context.Context, body GetPresignedUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPresignedUrlsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewServiceToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewServiceTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAbortMultipartUploadRequest calls the generic AbortMultipartUpload builder with application/json body
func NewAbortMultipartUploadRequest(server string, body AbortMultipartUploadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAbortMultipartUploadRequestWithBody(server, "application/json", bodyReader)
}

// NewAbortMultipartUploadRequestWithBody generates requests for AbortMultipartUpload with any type of body
func NewAbortMultipartUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/s3/abortMultipartUpload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteUploadRequest calls the generic CompleteUpload builder with application/json body
func NewCompleteUploadRequest(server string, body CompleteUploadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteUploadRequestWithBody(server, "application/json", bodyReader)
}

// NewCompleteUploadRequestWithBody generates requests for CompleteUpload with any type of body
func NewCompleteUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/s3/completeUpload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFinalizeDatasetUploadRequest calls the generic FinalizeDatasetUpload builder with application/json body
func NewFinalizeDatasetUploadRequest(server string, body FinalizeDatasetUploadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFinalizeDatasetUploadRequestWithBody(server, "application/json", bodyReader)
}

// NewFinalizeDatasetUploadRequestWithBody generates requests for FinalizeDatasetUpload with any type of body
func NewFinalizeDatasetUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/s3/finalizeDatasetUpload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPresignedUrlsRequest calls the generic GetPresignedUrls builder with application/json body
func NewGetPresignedUrlsRequest(server string, body GetPresignedUrlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPresignedUrlsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetPresignedUrlsRequestWithBody generates requests for GetPresignedUrls with any type of body
func NewGetPresignedUrlsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/s3/presignedUrls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateNewServiceTokenRequest generates requests for CreateNewServiceToken
func NewCreateNewServiceTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AbortMultipartUploadWithBodyWithResponse request with any body
	AbortMultipartUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AbortMultipartUploadResponse, error)

	AbortMultipartUploadWithResponse(ctx context.Context, body AbortMultipartUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*AbortMultipartUploadResponse, error)

	// CompleteUploadWithBodyWithResponse request with any body
	CompleteUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteUploadResponse, error)

	CompleteUploadWithResponse(ctx context.Context, body CompleteUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteUploadResponse, error)

	// FinalizeDatasetUploadWithBodyWithResponse request with any body
	FinalizeDatasetUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinalizeDatasetUploadResponse, error)

	FinalizeDatasetUploadWithResponse(ctx context.Context, body FinalizeDatasetUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*FinalizeDatasetUploadResponse, error)

	// GetPresignedUrlsWithBodyWithResponse request with any body
	GetPresignedUrlsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPresignedUrlsResponse, error)

	GetPresignedUrlsWithResponse(ctx context.Context, body GetPresignedUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPresignedUrlsResponse, error)

	// CreateNewServiceTokenWithResponse request
	CreateNewServiceTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNewServiceTokenResponse, error)
}

type AbortMultipartUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AbortUploadResp
	JSON422      *HTTPValidationError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r AbortMultipartUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AbortMultipartUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompleteUploadResp
	JSON422      *HTTPValidationError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r CompleteUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FinalizeDatasetUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FinalizeDatasetUploadResp
	JSON422      *HTTPValidationError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r FinalizeDatasetUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FinalizeDatasetUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPresignedUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PresignedUrlResp
	JSON422      *HTTPValidationError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetPresignedUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPresignedUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNewServiceTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateServiceTokenResp
	JSON422      *HTTPValidationError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r CreateNewServiceTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNewServiceTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AbortMultipartUploadWithBodyWithResponse request with arbitrary body returning *AbortMultipartUploadResponse
func (c *ClientWithResponses) AbortMultipartUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AbortMultipartUploadResponse, error) {
	rsp, err := c.AbortMultipartUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAbortMultipartUploadResponse(rsp)
}

func (c *ClientWithResponses) AbortMultipartUploadWithResponse(ctx context.Context, body AbortMultipartUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*AbortMultipartUploadResponse, error) {
	rsp, err := c.AbortMultipartUpload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAbortMultipartUploadResponse(rsp)
}

// CompleteUploadWithBodyWithResponse request with arbitrary body returning *CompleteUploadResponse
func (c *ClientWithResponses) CompleteUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteUploadResponse, error) {
	rsp, err := c.CompleteUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteUploadResponse(rsp)
}

func (c *ClientWithResponses) CompleteUploadWithResponse(ctx context.Context, body CompleteUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteUploadResponse, error) {
	rsp, err := c.CompleteUpload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteUploadResponse(rsp)
}

// FinalizeDatasetUploadWithBodyWithResponse request with arbitrary body returning *FinalizeDatasetUploadResponse
func (c *ClientWithResponses) FinalizeDatasetUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinalizeDatasetUploadResponse, error) {
	rsp, err := c.FinalizeDatasetUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinalizeDatasetUploadResponse(rsp)
}

func (c *ClientWithResponses) FinalizeDatasetUploadWithResponse(ctx context.Context, body FinalizeDatasetUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*FinalizeDatasetUploadResponse, error) {
	rsp, err := c.FinalizeDatasetUpload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinalizeDatasetUploadResponse(rsp)
}

// GetPresignedUrlsWithBodyWithResponse request with arbitrary body returning *GetPresignedUrlsResponse
func (c *ClientWithResponses) GetPresignedUrlsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPresignedUrlsResponse, error) {
	rsp, err := c.GetPresignedUrlsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPresignedUrlsResponse(rsp)
}

func (c *ClientWithResponses) GetPresignedUrlsWithResponse(ctx context.Context, body GetPresignedUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPresignedUrlsResponse, error) {
	rsp, err := c.GetPresignedUrls(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPresignedUrlsResponse(rsp)
}

// CreateNewServiceTokenWithResponse request returning *CreateNewServiceTokenResponse
func (c *ClientWithResponses) CreateNewServiceTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNewServiceTokenResponse, error) {
	rsp, err := c.CreateNewServiceToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewServiceTokenResponse(rsp)
}

// ParseAbortMultipartUploadResponse parses an HTTP response from a AbortMultipartUploadWithResponse call
func ParseAbortMultipartUploadResponse(rsp *http.Response) (*AbortMultipartUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AbortMultipartUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AbortUploadResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCompleteUploadResponse parses an HTTP response from a CompleteUploadWithResponse call
func ParseCompleteUploadResponse(rsp *http.Response) (*CompleteUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompleteUploadResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFinalizeDatasetUploadResponse parses an HTTP response from a FinalizeDatasetUploadWithResponse call
func ParseFinalizeDatasetUploadResponse(rsp *http.Response) (*FinalizeDatasetUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FinalizeDatasetUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FinalizeDatasetUploadResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPresignedUrlsResponse parses an HTTP response from a GetPresignedUrlsWithResponse call
func ParseGetPresignedUrlsResponse(rsp *http.Response) (*GetPresignedUrlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPresignedUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PresignedUrlResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateNewServiceTokenResponse parses an HTTP response from a CreateNewServiceTokenWithResponse call
func ParseCreateNewServiceTokenResponse(rsp *http.Response) (*CreateNewServiceTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNewServiceTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateServiceTokenResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
